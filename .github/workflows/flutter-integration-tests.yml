name: Flutter integration tests

on:
  workflow_call:
    inputs:
      working-directory:
        default: "."
        required: false
        type: string

jobs:
  integration-test:
    name: Integration test
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    strategy:
      matrix:
        type: [ios, macos, windows, linux]
        include:
          - type: ios
            os: macos-latest

          - type: macos
            os: macos-latest

          - type: windows
            os: windows-latest

          - type: linux
            os: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4.1.1

      - name: Get project Flutter version 🏷️
        id: fvm-config
        uses: kuhnroyal/flutter-fvm-config-action@v2.0

      - name: Setup Flutter ⚙️
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ runner.os }}-flutter-${{ steps.fvm-config.outputs.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}

      - name: Cache Pub 💾
        uses: actions/cache@v3.3.3
        with:
          path: |
            **/.pub-cache
            **/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Patch for Linux build 🩹
        if: ${{ matrix.type == 'linux' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev

      - name: Start iOS simulator 📱
        uses: futureware-tech/simulator-action@v3
        if: ${{ matrix.type == 'ios' }}
        with:
          model: "iPhone 14 Pro Max"

      - name: Run integration tests 🧪
        shell: bash
        run: |
          flutter pub get

          if [ "${{ matrix.type }}" == "ios" ]; then
            flutter build ${{ matrix.type }} --simulator --target=integration_test/app_test.dart
          else
            flutter build ${{ matrix.type }} --target=integration_test/app_test.dart
          fi

          if [ "${{ matrix.type }}" == "linux" ]; then
            xvfb-run flutter test integration_test -d ${{ matrix.type }}
          else
            flutter test integration_test -d ${{ matrix.type }}
          fi
